/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.21).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package es.danielgaspar.ppbs.api;

import java.util.List;

import javax.validation.Valid;

import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import es.danielgaspar.ppbs.model.PaymentProcessor;
import es.danielgaspar.ppbs.model.PaymentProcessorDetail;
import es.danielgaspar.ppbs.model.PaymentProcessorReport;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2022-02-03T16:56:52.396+01:00")

@Validated
@Api(value = "paymentprocessor", description = "the paymentprocessor API")
@RequestMapping(value = "")
public interface PaymentprocessorApi {

    @ApiOperation(value = "create new payment processor", nickname = "createPaymentProcessor", notes = "", response = PaymentProcessorDetail.class, tags={ "Payment Processor", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = PaymentProcessorDetail.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/paymentprocessor",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<PaymentProcessorDetail> createPaymentProcessor(@ApiParam(value = "Body request" ,required=true )  @Valid @RequestBody PaymentProcessor body);


    @ApiOperation(value = "Delete Payment Processor", nickname = "deletePaymentProcessor", notes = "", response = PaymentProcessorDetail.class, tags={ "Payment Processor", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = PaymentProcessorDetail.class),
        @ApiResponse(code = 204, message = "No Content"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(value = "/paymentprocessor/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<PaymentProcessorDetail> deletePaymentProcessor(@ApiParam(value = "id",required=true) @PathVariable("id") Integer id);

    @ApiOperation(value = "Get all Payment Processor", nickname = "getAllPaymentProcessor", notes = "", response = PaymentProcessorDetail.class, responseContainer = "List", tags={ "Payment Processor", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = PaymentProcessorDetail.class, responseContainer = "List"),
        @ApiResponse(code = 204, message = "No Content"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/paymentprocessor",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<PaymentProcessorDetail>> getAllPaymentProcessor();

    @ApiOperation(value = "Get Payment Processor detail", nickname = "getPaymentProcessor", notes = "", response = PaymentProcessorDetail.class, tags={ "Payment Processor", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = PaymentProcessorDetail.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/paymentprocessor/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<PaymentProcessorDetail> getPaymentProcessor(@ApiParam(value = "id",required=true) @PathVariable("id") Integer id);


    @ApiOperation(value = "Report monthly", nickname = "reportPaymentProcessor", notes = "", response = PaymentProcessorReport.class, tags={ "Payment Processor", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = PaymentProcessorReport.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/paymentprocessor/{id}/report",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<PaymentProcessorReport> reportPaymentProcessor(@ApiParam(value = "id",required=true) @PathVariable("id") Integer id);


    @ApiOperation(value = "Update Payment Processor", nickname = "updatePaymentProcessor", notes = "", response = PaymentProcessorDetail.class, tags={ "Payment Processor", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = PaymentProcessorDetail.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/paymentprocessor/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<PaymentProcessorDetail> updatePaymentProcessor(@ApiParam(value = "id",required=true) @PathVariable("id") Integer id,@ApiParam(value = "Body request" ,required=true )  @Valid @RequestBody PaymentProcessor body);

}
